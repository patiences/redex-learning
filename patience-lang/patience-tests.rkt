#lang racket
(require redex)
(require "patience.rkt")

(define N5 (term 5))
(define N2 (term 2))
(define IDENTITY (term (lambda (x) x)))
(define MULT (term (lambda (x y) (* x y))))
(define MULT_5_2 (term (MULT N5 N2)))
(define ZERO? (term (if #true 1 0)))
(define TRUE (term #true))

(test-equal (redex-match? Patience e N5) #true)
(test-equal (redex-match? Patience e N2) #true)
(test-equal (redex-match? Patience e IDENTITY) #true)
(test-equal (redex-match? Patience e MULT) #true)
(test-equal (redex-match? Patience e MULT_5_2) #true)
(test-equal (redex-match? Patience e ZERO?) #true)
(test-equal (redex-match? Patience e TRUE) #true)
(test-equal (redex-match? Patience e (or #t #f)) #true)
(test-equal (redex-match? Patience e (not (not (not (not #t))))) #true)
(test-equal (redex-match? Patience e (list (list 1 2) (list 3 4) (list 4 5))) #true)

(test-->> reduce ZERO? (term 1))
(test-->> reduce (term (+ 5 6 7)) (term 18))
(test-->> reduce
          (term (if #false 2 3))
          (term 3))
(test-->> reduce (term (if #true (+ 0 1) (+ 0 2))) (term 1))
(test-->> reduce (term ((lambda (x) x) 1)) (term 1))
(test-->> reduce (term (+ ((lambda (x) (if x 10 20)) #true)
                          ((lambda (x) (if #false x x)) 77)))
          (+ 10 77))
(test-->> reduce (term (or #f #f #f #t)) #t)
(test-->> reduce (term (or ((lambda (x) x) #t))) #t)
(test-->> reduce (term (and #t #t #t #f)) #f)
(test-->> reduce (term (not (not (not #f)))) #t)
(test-->> reduce (term (list (+ 1 0) (+ 1 0) (+ 1 0))) (term (list 1 1 1)))
(test-results)
